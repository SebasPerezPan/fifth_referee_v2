-- SCHEMAS

create schema if not exists stats authorization -- user;
create schema if not exists reference authorization -- user;
create schema if not exists core authorization  -- user;
create schema if not exists registry authorization -- user;

-- REFERENCE

-- DATA TYPE

-- continent

CREATE TYPE reference.continent_enum AS ENUM (
    'Africa',
    'Asia',
    'Europe',
    'North America',
    'South America',
    'Australia'
    'Internation'
);

-- status

CREATE TYPE reference.status_enum AS ENUM (
    'starter',       -- comenzó el partido
    'substitute',    -- entró desde el banco
    'unused',        -- convocado pero no jugó
    'other'          -- no definido.
);

-- position

CREATE TYPE reference.position_enum AS ENUM (
    'GK',  -- Goalkeeper
    'DF',  -- Defender
    'MF',  -- Midfielder
    'FW'   -- Forward
);

CREATE TYPE reference.event_type_enum AS ENUM (
    'substitution',
    'yellow_card',
    'red_card',
    'woodwork'
);

-- competition 

CREATE TABLE reference.competition (
    competition_id SMALLINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    current_champion_id SMALLINT NULL REFERENCES reference.team(team_id),
    competition_name VARCHAR NOT NULL UNIQUE,
    default_matchdays SMALLINT NOT NULL default 38 check  (default_matchdays > 0)
    is_international BOOLEAN NOT NULL DEFAULT FALSE,
    continent reference.continent_enum NOT NULL
);

select * from reference.competition;
 ;

-- team

CREATE TABLE reference.team(
    team_id INTEGER PRIMARY KEY,
    team_name VARCHAR(100) NOT NULL UNIQUE,
    team_city VARCHAR(25),
    team_stadium VARCHAR(50)
);

-- player

CREATE TABLE reference.player(
    player_id INTEGER PRIMARY KEY,
    player_name VARCHAR(100) NOT NULL
);

-- Logic

-- Competition

-- Insert (safe method)

drop procedure reference.insert_competition;

CREATE OR REPLACE PROCEDURE reference.insert_competition(
    IN p_name TEXT,
    IN p_continent reference.continent_enum,
    IN p_is_international BOOLEAN DEFAULT FALSE,
    IN p_default_matchdays SMALLINT DEFAULT 38
)
LANGUAGE plpgsql
AS $$
DECLARE
    existing_id SMALLINT;
    v_matchdays SMALLINT;
BEGIN
    -- Validación: nombre vacío
    IF TRIM(p_name) IS NULL OR TRIM(p_name) = '' THEN
        RAISE EXCEPTION 'Competition name cannot be empty';
    END IF;

    -- Validación: continente nulo
    IF p_continent IS NULL THEN
        RAISE EXCEPTION 'Continent cannot be null';
    END IF;

    -- Si el parámetro viene NULL, usar el default de la tabla (38)
    v_matchdays := COALESCE(p_default_matchdays, 38);

    IF v_matchdays <= 0 THEN
        RAISE EXCEPTION 'Default matchdays must be a positive number';
    END IF;

    -- Buscar competencia existente (ignorar mayúsculas/minúsculas)
    SELECT competition_id
    INTO existing_id
    FROM reference.competition
    WHERE LOWER(competition_name) = LOWER(TRIM(p_name));

    IF existing_id IS NOT NULL THEN
        RAISE NOTICE 'Competition already exists with ID: %', existing_id;
        RETURN;
    END IF;

    -- Insertar nueva competencia
    INSERT INTO reference.competition (
        competition_name,
        is_international,
        continent,
        default_matchdays
    )
    VALUES (
        TRIM(p_name),
        p_is_international,
        p_continent,
        v_matchdays
    )
    RETURNING competition_id INTO existing_id;

    RAISE NOTICE 'Competition inserted successfully with ID: %', existing_id;
END;
$$;

-- Ejemplo de uso:

-- call reference.insert_competition('La Liga', 'Europe', false);

-- Getter (id by name)

drop function reference.get_competition_id_by_name;

CREATE OR REPLACE FUNCTION reference.get_competition_id_by_name(comp_name varchar)
RETURNS INTEGER AS $$
DECLARE
    comp_id INTEGER;
BEGIN
    SELECT competition_id INTO comp_id
    FROM reference.competition
    WHERE LOWER(TRIM(competition_name)) = LOWER(TRIM(comp_name));

    IF comp_id IS NULL THEN
        RAISE EXCEPTION 'Competition "%" not found.', comp_name;
    END IF;

    RETURN comp_id;
END;
$$ LANGUAGE plpgsql;

select * from reference.get_competition_id_by_name('la liga');

-- Getter (Select active comp by Continents).

drop function reference.get_competitions_by_continent;

CREATE OR REPLACE FUNCTION reference.get_active_competitions_by_continent(
    p_continent reference.continent_enum
)
RETURNS TABLE (
    competition_id SMALLINT,
    competition_name TEXT,
    is_international BOOLEAN,
    continent reference.continent_enum,
    current_champion_id SMALLINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        c.competition_id,
        c.competition_name::TEXT,  -- casteo explícito
        c.is_international,
        c.continent,
        c.current_champion_id
    FROM reference.competition c
    WHERE c.continent = p_continent;
END;
$$ LANGUAGE plpgsql STABLE;

SELECT * FROM reference.get_active_competitions_by_continent('Europe');

-- Team Table

-- Insertion

drop procedure reference.insert_team;

CREATE OR REPLACE PROCEDURE reference.insert_team(
	in p_team_id int,
    IN p_team_name varchar (50),
    IN p_team_city varchar (50),
    IN p_stadium varchar(50))
LANGUAGE plpgsql
AS $$
DECLARE
    existing_id SMALLINT;
BEGIN
    -- Validación
    IF TRIM(p_team_name) IS NULL OR TRIM(p_team_name) = '' THEN
        RAISE EXCEPTION 'Team name cannot be empty';
    END IF;

    IF p_team_city IS NULL THEN
        RAISE EXCEPTION 'City must be provided';
    END IF;

    -- Buscar si ya existe
    SELECT team_id INTO existing_id
    FROM reference.team
    WHERE LOWER(team_name) = LOWER(p_team_name);

    IF existing_id IS NOT NULL THEN
        RAISE NOTICE 'Team already exists with ID: %', existing_id;
        RETURN;
    END IF;

    -- Insertar nuevo
    INSERT INTO reference.team (team_id, team_name, team_city, team_stadium)
    VALUES (p_team_id,p_team_name, p_team_city, p_stadium)
    RETURNING team_id INTO existing_id;

    RAISE NOTICE 'Team inserted with ID: %', existing_id;
END;
$$;

-- call reference.insert_team(2,'America','Cali', 'Palma Seca')
-- select * from reference.team t;

-- player

CREATE OR REPLACE PROCEDURE reference.insert_player(
    IN p_player_id INT,
    IN p_player_name varchar(50)
)
LANGUAGE plpgsql
AS $$
DECLARE
    existing_id INT;
BEGIN
    -- Validación: nombre vacío
    IF TRIM(p_player_name) IS NULL OR TRIM(p_player_name) = '' THEN
        RAISE EXCEPTION 'Player name cannot be empty';
    END IF;

    -- Validación: ID nulo o inválido
    IF p_player_id IS NULL OR p_player_id <= 0 THEN
        RAISE EXCEPTION 'Invalid player ID';
    END IF;

    -- Verificar si ya existe el ID
    SELECT player_id INTO existing_id
    FROM reference.player
    WHERE player_id = p_player_id;

    IF existing_id IS NOT NULL THEN
        RAISE NOTICE 'Player with ID % already exists', p_player_id;
        RETURN;
    END IF;

    -- Insertar jugador
    INSERT INTO reference.player (player_id, player_name)
    VALUES (p_player_id, p_player_name);

    RAISE NOTICE 'Player inserted with ID: %', p_player_id;
END;
$$;

-- call reference.insert_player(2, 'lionel');

-- CORE

-- season

drop table core.season;

CREATE TABLE core.season (
    season_id SMALLINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    
    season_label VARCHAR(20) NOT NULL,
    competition_id SMALLINT NOT NULL REFERENCES reference.competition(competition_id) ON DELETE CASCADE,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    
    UNIQUE (competition_id, season_label)
);

-- matchday

CREATE TABLE core.matchday (
    matchday_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    
    season_id SMALLINT NOT NULL REFERENCES core.season(season_id) ON DELETE CASCADE,
    matchday_number SMALLINT NOT NULL CHECK (matchday_number > 0),
    
    UNIQUE (season_id, matchday_number)
);

-- match

drop table core.match;

CREATE TABLE core.match (
    match_id INTEGER PRIMARY KEY,
    
    matchday_id INTEGER NOT NULL REFERENCES core.matchday(matchday_id) ON DELETE CASCADE,
    local_team_id INTEGER NOT NULL REFERENCES reference.team(team_id),
    away_team_id INTEGER NOT NULL REFERENCES reference.team(team_id),
    CHECK (local_team_id <> away_team_id),
    local_score SMALLINT CHECK (local_score >= 0),
    away_score SMALLINT CHECK (away_score >= 0),
    duration SMALLINT NOT NULL DEFAULT 90 CHECK (duration >= 0),
    stadium VARCHAR(100),
    
    UNIQUE (matchday_id, local_team_id, away_team_id)
);

-- event

CREATE TABLE core.event (
    event_id SERIAL PRIMARY KEY,
    
    match_id INTEGER NOT NULL REFERENCES core.match(match_id) ON DELETE CASCADE,
    event_type reference.event_type_enum NOT NULL,
    minute SMALLINT,
    main_player_id INTEGER REFERENCES reference.player(player_id),
    extra_player_id INTEGER REFERENCES reference.player(player_id),
    team_id INTEGER REFERENCES reference.team(team_id)
);

-- participation

CREATE TABLE core.participation (
    match_id INTEGER NOT NULL REFERENCES core.match(match_id) on delete cascade ,
    player_id INTEGER NOT NULL REFERENCES reference.player(player_id),
    
    status reference.status_enum NOT NULL,      -- starter, sub, manager, etc.
    position reference.position_enum NOT NULL,  -- GK, DF, MF, FW
    
    PRIMARY KEY (match_id, player_id)
);

CREATE TABLE core.basic_stats (
    basic_stats_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    match_id INTEGER NOT null ,
    player_id INTEGER NOT NULL,

    goals SMALLINT CHECK (goals >= 0),
    assists SMALLINT CHECK (assists >= 0),
    touches SMALLINT CHECK (touches >= 0),
    passes_total SMALLINT CHECK (passes_total >= 0),
    passes_completed SMALLINT CHECK (passes_completed >= 0),
    ball_recoveries SMALLINT CHECK (ball_recoveries >= 0),
    possessions_lost SMALLINT CHECK (possessions_lost >= 0),

    aerial_duels_won SMALLINT CHECK (aerial_duels_won >= 0),
    aerial_duels_total SMALLINT CHECK (aerial_duels_total >= 0),
    ground_duels_won SMALLINT CHECK (ground_duels_won >= 0),
    ground_duels_total SMALLINT CHECK (ground_duels_total >= 0),

    UNIQUE (match_id, player_id),
    FOREIGN KEY (match_id, player_id)
        REFERENCES core.participation(match_id, player_id) on delete cascade
);

-- Logic

-- Core

-- Season

-- Insert (Safe mode)

drop procedure core.insert_season;

CREATE OR REPLACE PROCEDURE core.insert_season(
    IN p_season_label TEXT,
    IN p_competition_id INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    existing_id INTEGER;
BEGIN
    -- Validación: label vacío
    IF TRIM(p_season_label) IS NULL OR TRIM(p_season_label) = '' THEN
        RAISE EXCEPTION 'Season label cannot be empty';
    END IF;

    -- Validación: competencia nula
    IF p_competition_id IS NULL THEN
        RAISE EXCEPTION 'Competition ID cannot be null';
    END IF;

    -- Buscar season existente (ignorando mayúsculas/minúsculas)
    SELECT season_id
    INTO existing_id
    FROM core.season
    WHERE competition_id = p_competition_id
      AND LOWER(season_label) = LOWER(TRIM(p_season_label));

    IF existing_id IS NOT NULL THEN
        RAISE NOTICE 'Season already exists with ID: %', existing_id;
        RETURN;
    END IF;

    -- Insertar nueva season
    INSERT INTO core.season (
        season_label,
        competition_id,
        is_completed
    )
    VALUES (
        TRIM(p_season_label),
        p_competition_id,
        FALSE
    )
    RETURNING season_id INTO existing_id;

    RAISE NOTICE 'Season inserted successfully with ID: %', existing_id;
END;
$$;

-- CALL core.insert_season('2029_2030', 3);
-- select * from core.season;

-- Getter (season by id)

drop function core.get_season_id;

CREATE OR REPLACE FUNCTION core.get_season_id(
    p_season_label TEXT,
    p_competition_id int
)
RETURNS INTEGER AS $$
DECLARE
    v_season_id INTEGER;
BEGIN
    IF TRIM(p_season_label) IS NULL OR TRIM(p_season_label) = '' THEN
        RETURN Null;
    END IF;

    IF p_competition_id IS NULL THEN
        RETURN Null;
    END IF;

    SELECT season_id
    INTO v_season_id
    FROM core.season
    WHERE competition_id = p_competition_id
      AND LOWER(TRIM(season_label)) = LOWER(TRIM(p_season_label));

    RETURN v_season_id;
END;
$$ LANGUAGE plpgsql;

select * from core.get_season_id(
    '2024_2025',
    1
)

-- Matchdays

-- Insert (Safe mode)

drop procedure core.insert_matchdays;

CREATE OR REPLACE PROCEDURE core.insert_matchdays(
    IN p_season_id INTEGER,
    IN p_total_matchdays INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    matchday_number SMALLINT := 1;
BEGIN
    -- Validación: season_id vacío o nulo
    IF p_season_id IS NULL THEN
        RAISE EXCEPTION 'Season ID cannot be null';
    END IF;

    -- Validación: número de jornadas válido
    IF p_total_matchdays IS NULL OR p_total_matchdays <= 0 THEN
        RAISE EXCEPTION 'Total matchdays must be a positive number';
    END IF;

    -- Validación: existencia de la temporada
    IF NOT EXISTS (SELECT 1 FROM core.season WHERE season_id = p_season_id) THEN
        RAISE EXCEPTION 'Season with ID % does not exist', p_season_id;
    END IF;

    -- Inserción de las jornadas
    WHILE matchday_number <= p_total_matchdays LOOP
        INSERT INTO core.matchday (season_id, matchday_number)
        VALUES (p_season_id, matchday_number);
        matchday_number := matchday_number + 1;
    END LOOP;

    RAISE NOTICE '% matchdays inserted for season_id %', p_total_matchdays, p_season_id;
END;
$$;

-- call core.insert_matchdays (6, 123);
-- select * from core.matchday;

-- Get (matchday_quantity_season)

CREATE OR REPLACE FUNCTION core.count_matchdays(
    p_season_id INTEGER
)
RETURNS INTEGER AS $$
DECLARE
    v_count INTEGER;
    v_exists BOOLEAN;
BEGIN
    -- Validación: temporada nula
    IF p_season_id IS NULL THEN
        RAISE EXCEPTION 'Season ID cannot be null';
    END IF;

    -- Verificar si existe la temporada
    SELECT EXISTS (
        SELECT 1 FROM core.season WHERE season_id = p_season_id
    ) INTO v_exists;

    IF NOT v_exists THEN
        RETURN -1;
    END IF;

    -- Contar jornadas si existe la temporada
    SELECT COUNT(*) INTO v_count
    FROM core.matchday
    WHERE season_id = p_season_id;

    RETURN v_count;
END;
$$ LANGUAGE plpgsql;

-- select core.count_matchdays(6);

-- STATS

-- goalkeeper

CREATE TABLE stats.goalkeeper_stats (
    basic_stats_id INTEGER PRIMARY KEY REFERENCES core.basic_stats(basic_stats_id),

    shots_blocked SMALLINT CHECK (shots_blocked >= 0),
    punches_cleared SMALLINT CHECK (punches_cleared >= 0),
    high_claims SMALLINT CHECK (high_claims >= 0),
    goalkeeper_saves SMALLINT CHECK (goalkeeper_saves >= 0),
    saves_inside_box SMALLINT CHECK (saves_inside_box >= 0),

    goals_conceded SMALLINT CHECK (goals_conceded >= 0),
    xg_on_target_against SMALLINT CHECK (xg_on_target_against >= 0),
    xg_from_shots_on_target SMALLINT CHECK (xg_from_shots_on_target >= 0),
    goals_prevented SMALLINT CHECK (goals_prevented >= 0),

    clearances SMALLINT CHECK (clearances >= 0),
    penalties_saved SMALLINT CHECK (penalties_saved >= 0),

    errors_leading_to_goal SMALLINT CHECK (errors_leading_to_goal >= 0),
    errors_leading_to_shot SMALLINT CHECK (errors_leading_to_shot >= 0),

    interceptions SMALLINT CHECK (interceptions >= 0),
    times_dribbled_past SMALLINT CHECK (times_dribbled_past >= 0)
);

-- defender

CREATE TABLE stats.defender_stats (
    basic_stats_id INTEGER PRIMARY KEY REFERENCES core.basic_stats(basic_stats_id),

    interceptions SMALLINT CHECK (interceptions >= 0),
    times_dribbled_past SMALLINT CHECK (times_dribbled_past >= 0),

    errors_leading_to_goal SMALLINT CHECK (errors_leading_to_goal >= 0),
    errors_leading_to_shot SMALLINT CHECK (errors_leading_to_shot >= 0),

    fouls_committed SMALLINT CHECK (fouls_committed >= 0)
);

-- midfielder

CREATE TABLE stats.midfielder_stats (
    basic_stats_id INTEGER PRIMARY KEY REFERENCES core.basic_stats(basic_stats_id),

    interceptions SMALLINT CHECK (interceptions >= 0),
    crosses SMALLINT CHECK (crosses >= 0),
    total_crosses SMALLINT CHECK (total_crosses >= 0),
    expected_assists SMALLINT CHECK (expected_assists >= 0),
    woodwork_hits SMALLINT CHECK (woodwork_hits >= 0),
    big_chances_scored SMALLINT CHECK (big_chances_scored >= 0),

    penalties_missed SMALLINT CHECK (penalties_missed >= 0),

    errors_leading_to_goal SMALLINT CHECK (errors_leading_to_goal >= 0),
    errors_leading_to_shot SMALLINT CHECK (errors_leading_to_shot >= 0),

    times_dribbled_past SMALLINT CHECK (times_dribbled_past >= 0),
    successful_dribbles SMALLINT CHECK (successful_dribbles >= 0),
    total_dribbles SMALLINT CHECK (total_dribbles >= 0),

    possessions_won_final_third SMALLINT CHECK (possessions_won_final_third >= 0),
    total_shots SMALLINT CHECK (total_shots >= 0),

    fouls_committed SMALLINT CHECK (fouls_committed >= 0),
    fouls_suffered SMALLINT CHECK (fouls_suffered >= 0)
);

-- fordward

CREATE TABLE stats.forward_stats (
    basic_stats_id INTEGER PRIMARY KEY REFERENCES core.basic_stats(basic_stats_id),

    total_shots SMALLINT CHECK (total_shots >= 0),
    shots_on_target SMALLINT CHECK (shots_on_target >= 0),
    shots_blocked SMALLINT CHECK (shots_blocked >= 0),
    shots_off_target SMALLINT CHECK (shots_off_target >= 0),

    big_chances_scored SMALLINT CHECK (big_chances_scored >= 0),
    expected_goals SMALLINT CHECK (expected_goals >= 0),
    expected_assists SMALLINT CHECK (expected_assists >= 0),

    woodwork_hits SMALLINT CHECK (woodwork_hits >= 0),
    offsides SMALLINT CHECK (offsides >= 0),
    big_chances_missed SMALLINT CHECK (big_chances_missed >= 0),

    successful_dribbles SMALLINT CHECK (successful_dribbles >= 0),
    total_dribbles SMALLINT CHECK (total_dribbles >= 0),

    crosses SMALLINT CHECK (crosses >= 0),
    total_crosses SMALLINT CHECK (total_crosses >= 0),

    penalties_missed SMALLINT CHECK (penalties_missed >= 0),
    possessions_won_final_third SMALLINT CHECK (possessions_won_final_third >= 0)
);

-- REGISTRY

-- season_team

CREATE TABLE registry.season_team (
	season_team_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    season_id INTEGER NOT NULL REFERENCES core.season(season_id),
    team_id INTEGER NOT NULL REFERENCES reference.team(team_id),
    UNIQUE (season_id, team_id)
);

-- team_player

CREATE TABLE registry.team_player (
    season_team_id INTEGER NOT NULL REFERENCES registry.season_team(season_team_id),
    player_id INTEGER NOT NULL REFERENCES reference.player(player_id),
    jersey_number SMALLINT,
    PRIMARY KEY (season_team_id, player_id)
);

